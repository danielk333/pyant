.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_gallery_vectorized_gain.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_gallery_vectorized_gain.py:


Vectorized gain functions
================================




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[1.92696577e-03 1.80917826e-03 1.67612471e-03 ... 2.18244716e-03
      1.63826916e-03 1.08804214e-03]
     [2.16683970e-03 2.10801193e-03 2.02777437e-03 ... 9.43162700e-04
      4.82358637e-04 1.57360885e-04]
     [2.20533307e-03 2.21623503e-03 2.20374063e-03 ... 9.53736902e-05
      9.13226607e-09 9.89730697e-05]
     ...
     [2.03992683e-05 5.10151845e-05 9.53736902e-05 ... 3.24889799e-03
      4.37890431e-03 5.42088165e-03]
     [3.78825861e-04 4.82358637e-04 5.96543451e-04 ... 4.55391135e-04
      1.16659279e-03 2.12054850e-03]
     [1.08804214e-03 1.23645778e-03 1.38894437e-03 ... 3.69180178e-04
      3.28738228e-05 6.19255788e-05]]
    "Airy.gain" (1000000) loop       performance: 3.1e+01 seconds
    "Airy.gain" (1000000) vectorized performance: 1.2e+00 seconds






|


.. code-block:: default

    import time

    import numpy as np
    import pyant


    number = 1000
    kn = 1000

    ant = pyant.Airy(
        azimuth=45.0,
        elevation=75.0, 
        frequency=930e6,
        I0=10**4.81,
        radius=23.0,
    )

    kx = np.linspace(-1, 1, num=kn)
    ky = np.linspace(-1, 1, num=kn)

    size = len(kx)*len(ky)

    #loop version
    start_time = time.time()

    G = np.zeros((len(kx),len(ky)))
    for i,x in enumerate(kx):
        for j,y in enumerate(ky):
            k=np.array([x, y, np.sqrt(1.0 - x**2 + y**2)])
            G[i,j] = ant.gain(k)

    loop_time = time.time() - start_time

    #vectorized version
    start_time = time.time()

    xv, yv = np.meshgrid(kx, ky, sparse=False, indexing='ij')
    k = np.empty((3,size), dtype=np.float64)
    k[0,:] = xv.reshape(1,size)
    k[1,:] = yv.reshape(1,size)
    k[2,:] = np.sqrt(1.0 - k[0,:]**2 + k[1,:]**2)

    #We want to use reshape as a inverse function so we make sure its the exact same dimensionality
    G = np.zeros((1,size))
    G[0,:] = ant.gain(k)
    G = G.reshape(len(kx),len(ky))

    vector_time = time.time() - start_time

    print(G)

    print(f'"Airy.gain" ({size}) loop       performance: {loop_time:.1e} seconds')
    print(f'"Airy.gain" ({size}) vectorized performance: {vector_time:.1e} seconds')


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  31.779 seconds)


.. _sphx_glr_download_auto_gallery_vectorized_gain.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: vectorized_gain.py <vectorized_gain.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: vectorized_gain.ipynb <vectorized_gain.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
